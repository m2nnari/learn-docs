"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.palettePlugin = exports.presetOptions = void 0;
const utils_1 = require("@vuepress/utils");
/**
 * Default options for different palette preset
 */
exports.presetOptions = {
    css: {
        userPaletteFile: '.vuepress/styles/palette.css',
        tempPaletteFile: 'styles/palette.css',
        userStyleFile: '.vuepress/styles/index.css',
        tempStyleFile: 'styles/index.css',
        importCode: (filePath) => `@import '${filePath}';\n`,
    },
    sass: {
        userPaletteFile: '.vuepress/styles/palette.scss',
        tempPaletteFile: 'styles/palette.scss',
        userStyleFile: '.vuepress/styles/index.scss',
        tempStyleFile: 'styles/index.scss',
        importCode: (filePath) => `@forward '${filePath}';\n`,
    },
    less: {
        userPaletteFile: '.vuepress/styles/palette.less',
        tempPaletteFile: 'styles/palette.less',
        userStyleFile: '.vuepress/styles/index.less',
        tempStyleFile: 'styles/index.less',
        importCode: (filePath) => `@import '${filePath}';\n`,
    },
    stylus: {
        userPaletteFile: '.vuepress/styles/palette.styl',
        tempPaletteFile: 'styles/palette.styl',
        userStyleFile: '.vuepress/styles/index.styl',
        tempStyleFile: 'styles/index.styl',
        importCode: (filePath) => `@require '${filePath}';\n`,
    },
};
const palettePlugin = ({ preset = 'css', userPaletteFile = exports.presetOptions[preset].userPaletteFile, tempPaletteFile = exports.presetOptions[preset].tempPaletteFile, userStyleFile = exports.presetOptions[preset].userStyleFile, tempStyleFile = exports.presetOptions[preset].tempStyleFile, importCode = exports.presetOptions[preset].importCode, }, app) => {
    const userPalette = app.dir.source(userPaletteFile);
    const userStyle = app.dir.source(userStyleFile);
    return {
        name: '@vuepress/plugin-palette',
        alias: {
            '@vuepress/plugin-palette/palette': app.dir.temp(tempPaletteFile),
            '@vuepress/plugin-palette/style': app.dir.temp(tempStyleFile),
        },
        onPrepared: async () => {
            let paletteContent = '';
            let styleContent = '';
            if (await utils_1.fs.pathExists(userPalette)) {
                paletteContent += importCode(userPalette);
            }
            if (await utils_1.fs.pathExists(userStyle)) {
                styleContent += importCode(userStyle);
            }
            await app.writeTemp(tempPaletteFile, paletteContent);
            await app.writeTemp(tempStyleFile, styleContent);
        },
    };
};
exports.palettePlugin = palettePlugin;
exports.default = exports.palettePlugin;
//# sourceMappingURL=index.js.map