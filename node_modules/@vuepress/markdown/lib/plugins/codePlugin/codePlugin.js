"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codePlugin = void 0;
const resolveHighlightLines_1 = require("./resolveHighlightLines");
const resolveLanguage_1 = require("./resolveLanguage");
const resolveLineNumbers_1 = require("./resolveLineNumbers");
const resolveVPre_1 = require("./resolveVPre");
/**
 * Code plugin
 */
const codePlugin = (md, { highlight = true, highlightLines = true, lineNumbers = true, preWrapper = true, vPre = true, } = {}) => {
    // override default fence renderer
    md.renderer.rules.fence = (tokens, idx, options, env, slf) => {
        var _a, _b;
        const token = tokens[idx];
        // get token info
        const info = token.info ? md.utils.unescapeAll(token.info).trim() : '';
        // resolve highlight line ranges from token info
        let highlightLinesRanges = null;
        if (highlightLines) {
            highlightLinesRanges = resolveHighlightLines_1.resolveHighlightLines(info);
        }
        // resolve line-numbers mark from token info
        const useLineNumbers = (_a = resolveLineNumbers_1.resolveLineNumbers(info)) !== null && _a !== void 0 ? _a : lineNumbers;
        // resolve v-pre mark from token info
        const useVPre = (_b = resolveVPre_1.resolveVPre(info)) !== null && _b !== void 0 ? _b : vPre;
        // resolve language from token info
        const language = resolveLanguage_1.resolveLanguage(info);
        // the result of code and lang
        let code = token.content;
        // try to highlight code
        if (highlight) {
            // lazy-load syntax highlighter
            const highlighter = require('./resolveHighlighter').resolveHighlighter(language);
            if (highlighter !== null) {
                code = highlighter(code);
            }
        }
        // if the code is not highlighted, treat it as text and escape it
        if (code === token.content) {
            code = md.utils.escapeHtml(code);
        }
        const languageClass = `${options.langPrefix}${language.name}`;
        let result = `<pre${useVPre ? ' v-pre' : ''} class="${languageClass}"><code>${code}</code></pre>`;
        // if `preWrapper` is disabled, return directly
        if (!preWrapper) {
            return result;
        }
        // code fences always have an ending `\n`, so we should trim the last line
        const lines = code.split('\n').slice(0, -1);
        // generate highlight lines
        if (highlightLinesRanges) {
            const ranges = highlightLinesRanges;
            const highlightLinesCode = lines
                .map((_, index) => {
                if (resolveHighlightLines_1.isHighlightLine(index + 1, ranges)) {
                    return '<div class="highlight-line">&nbsp;</div>';
                }
                return '<br>';
            })
                .join('');
            result = `${result}<div class="highlight-lines">${highlightLinesCode}</div>`;
        }
        // generate line numbers
        if (useLineNumbers) {
            // generate line numbers code
            const lineNumbersCode = lines
                .map((_, index) => `<span class="line-number">${index + 1}</span><br>`)
                .join('');
            result = `${result}<div class="line-numbers">${lineNumbersCode}</div>`;
        }
        result = `<div class="${languageClass} ext-${language.ext}${useLineNumbers ? ' line-numbers-mode' : ''}">${result}</div>`;
        return result;
    };
};
exports.codePlugin = codePlugin;
//# sourceMappingURL=codePlugin.js.map