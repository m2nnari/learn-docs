"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const core_1 = require("@vuepress/core");
const utils_1 = require("@vuepress/utils");
const config_1 = require("../../config");
const resolveBuildAppConfig_1 = require("./resolveBuildAppConfig");
const log = utils_1.debug('vuepress:cli/build');
const build = async (sourceDir = '.', commandOptions = {}) => {
    log(`commandOptions:`, commandOptions);
    if (process.env.NODE_ENV === undefined) {
        process.env.NODE_ENV = 'production';
    }
    // resolve base app config
    const appConfig = resolveBuildAppConfig_1.resolveBuildAppConfig(sourceDir, commandOptions);
    // resolve user config file
    const userConfigPath = commandOptions.config
        ? config_1.resolveUserConfigPath(commandOptions.config)
        : config_1.resolveUserConfigConventionalPath(appConfig.source);
    log(`userConfigPath:`, userConfigPath);
    const userConfig = await config_1.loadUserConfig(userConfigPath);
    // create vuepress app
    const app = core_1.createApp({
        // use cli options to override config file
        ...userConfig,
        ...appConfig,
    });
    // use user-config plugin
    app.use(config_1.transformUserConfigToPlugin(app, userConfig));
    // clean temp and cache
    if (commandOptions.cleanTemp === true) {
        utils_1.logger.info('Cleaning temp...');
        await utils_1.fs.remove(app.dir.temp());
    }
    if (commandOptions.cleanCache === true) {
        utils_1.logger.info('Cleaning cache...');
        await utils_1.fs.remove(app.dir.cache());
    }
    // initialize and prepare
    utils_1.logger.info('Initializing VuePress and preparing data...');
    await app.init();
    await app.prepare();
    // build
    await app.build();
};
exports.build = build;
//# sourceMappingURL=build.js.map